syntax = "proto3";

package consensus;

service Consensus {
  // Register a Subscription.. Streaming block's info when new block is mined. 
  rpc SubscribeNewBlock(SubsInfo) returns (stream Block) {}
}

message SubsInfo {
  string remoteAddr = 1;
  enum   EventType {
    NEWBLOCK = 0;
  }
  EventType subsEvent = 2 [default = NEWBLOCK];
}

message Block {
  int32 index = 1;
  string prevHash = 2;
  int32 time = 3;
  int32 nonce = 4;
  string hash = 5;
  string merkleRoot = 6;
  repeated Transaction transactions = 7;
}

message Transaction {
  string id = 1;
  int32  time = 2;
  bool   reward = 3;
  string address = 4;
  string hash = 5;
  string signature = 6;
  repeated Input inputs = 7;
  repeated Output outputs = 8;
}

message Input {
  string tx = 1;
  int32  index = 2;
  int32  amount = 3;
  string address = 4;
  string signature = 5;
}

message Output {
  int32  index = 1;
  int32  amount = 2;
  string address = 3;
}

  
